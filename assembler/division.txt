mv    $r0, -8
sll   $r0, $r0
lw    $r0, [r0]
sreg  $r0, $r4

mv    $r1, -8
sll   $r1, $r1
addi  $r1, 1
lw    $r1, [r1]
sreg  $r1, $r5

mv    $r2, -8
sll   $r2, $r2
addi  $r2, 2
lw    $r2, [r2]
sreg  $r2, $r6

mv    $r3, 7
sll   $r3, $r3
addi  $r2, -2
lw    $r3, [r3]
sreg  $r3, $r7

LOOP:
lreg  $r2, $r6          #loads the divisor
lreg  $r1, $r5
slt   $r2, $r1          #sets r2 to 0/1 one if its less than r1 or not
bez   $r2, SHIFT        #jumps to shift on condition

lreg  $r2, $r6          #loads the divisor
subu  $r1, $r2          #subtracts the divisor from the LSW


addi  $r3, 1            #resets it to 0 if it is or incr if not
bez   $r3, INCRMSW      #jumps to increment the MSW
mv    $r2, 0
bez   $r0, LOOP        #reloops by comparing to 0(r15) automatically

INCRMSW:
lreg  $r3, $r7  #loads the current MSW
addi  $r3, 1            #incr by 1
sreg  $r3, $r7  #resaves the MSW
mv    $r3, 0               #resets our LSW quotient accumulator

bez   $r3, LOOP        #resets loop


SHIFT:
bez   $r0, DONE         #if MSW of dividend is already 0 then DONE
mv    $r2, 1
subu  $r0, $r2
mv    $r2, -1
sll   $r2, $r2
addi  $r2, -1
lreg  $r1, $r6
subu  $r2, $r1          #subs 11111111 to the dividend LSW
lreg  $r1, $r5
addu  $r1, $r2
addi  $r1, 1

addi  $r3, 1
bez   $r3, INCRMSW
mv    $r2, 0
bez   $r2, LOOP         #loops on r15 automatically


DONE:
mv    $r2, 7
sll   $r2, $r2
addi  $r2, -1
sw    $r3, [$r2]   #stores the LSW quotient to memory,
ht                      #our MSW is already stored
